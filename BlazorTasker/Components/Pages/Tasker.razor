@page "/tasker"

@using BlazorTasker.Models
@using BlazorTasker.Components.UI
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IJSRuntime JS;

<div class="d-flex align-items-center justify-content-center">
    <div class="task p-5">
        <div class="p-2 text-center mb-3">
            <img src="/img/Tasker_600.png" width="300" />
        </div>
        <div>
            <EditForm Model="ti" OnValidSubmit="addTask">
                <DataAnnotationsValidator />
                <div class="d-flex flex-row gap-2">
                    <InputText class="form-control" placeholder="Enter a task" @bind-Value="ti.Name" @ref="textBoxTask" />
                    <button type="submit" class="btn btn-primary">Add</button>
                </div>
                <div>
                    <ValidationMessage For="() => ti.Name" />
                </div>
            </EditForm>
        </div>
        <hr />
        <div class="vstack">
            @foreach (var lineItem in taskerItems)
            {
                <TaskerLine Item="lineItem" OnDeleteCallBack="@deleteTask" />
            }
        </div>
    </div>
</div>


@code {
    private TaskerItem ti = new();
    private List<TaskerItem> taskerItems = new();
    private InputText? textBoxTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Load the items from local storage
        await LoadListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await textBoxTask!.Element!.Value.FocusAsync();
        }
    }

    private async void addTask()
    {
        ti.Id = Guid.NewGuid(); // Assign a unique ID to the task
        taskerItems.Add(ti);    // Add the task to the list
        ti = new();             // Reset ti for new input
        await SaveListAsync();  // Save the updated list to local storage
        await textBoxTask!.Element!.Value.FocusAsync();
    }

    private async void deleteTask(TaskerItem item)
    {
        taskerItems.Remove(item); // Remove the task from the list
        await SaveListAsync();    // Save the updated list to local storage
    }

    private async Task SaveListAsync()
    {
        string? taskerItemsJson = JsonSerializer.Serialize(taskerItems);
        await JS.InvokeVoidAsync("localStorage.setItem", "TaskerList", taskerItemsJson);
    }

    private async Task LoadListAsync()
    {
        try
        {
            string? taskserItemsJson = await JS.InvokeAsync<string>("localStorage.getItem", "TaskerList") ?? "[]";
            taskerItems = JsonSerializer.Deserialize<List<TaskerItem>>(taskserItemsJson)!;
        }
        catch (Exception)
        {
            taskerItems = new();
            await SaveListAsync();
        }
    }

    private async void updateTask(TaskerItem item)
    {
        // Save the updated list to local storage
        await SaveListAsync();
    }

}